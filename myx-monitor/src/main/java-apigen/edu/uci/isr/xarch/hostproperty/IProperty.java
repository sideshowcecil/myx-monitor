/*
 * Copyright (c) 2000-2005 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed at the University of California, Irvine.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Irvine.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
package edu.uci.isr.xarch.hostproperty;

import java.util.Collection;
import edu.uci.isr.xarch.XArchActionMetadata;
import edu.uci.isr.xarch.XArchTypeMetadata;
import edu.uci.isr.xarch.XArchPropertyMetadata;

/**
 * Interface for accessing objects of the
 * Property <code>xsi:type</code> in the
 * hostproperty namespace.
 * 
 * @author Automatically generated by xArch apigen
 */
public interface IProperty extends edu.uci.isr.xarch.IXArchElement{

	public final static XArchTypeMetadata TYPE_METADATA = new XArchTypeMetadata(
		XArchTypeMetadata.XARCH_ELEMENT,
		"hostproperty", "Property", edu.uci.isr.xarch.IXArchElement.TYPE_METADATA,
		new XArchPropertyMetadata[]{
			XArchPropertyMetadata.createElement("name", "instance", "Description", 1, 1),
			XArchPropertyMetadata.createElement("value", "instance", "Description", 1, XArchPropertyMetadata.UNBOUNDED)},
		new XArchActionMetadata[]{});

	/**
	 * Set the name for this Property.
	 * @param value new name
	 */
	public void setName(edu.uci.isr.xarch.instance.IDescription value);

	/**
	 * Clear the name from this Property.
	 */
	public void clearName();

	/**
	 * Get the name from this Property.
	 * @return name
	 */
	public edu.uci.isr.xarch.instance.IDescription getName();

	/**
	 * Determine if this Property has the given name
	 * @param nameToCheck name to compare
	 * @return <code>true</code> if the names are equivalent,
	 * <code>false</code> otherwise
	 */
	public boolean hasName(edu.uci.isr.xarch.instance.IDescription nameToCheck);

	/**
	 * Add a value to this Property.
	 * @param newValue value to add.
	 */
	public void addValue(edu.uci.isr.xarch.instance.IDescription newValue);

	/**
	 * Add a collection of values to this Property.
	 * @param values values to add.
	 */
	public void addValues(Collection values);

	/**
	 * Remove all values from this Property.
	 */
	public void clearValues();

	/**
	 * Remove the given value from this Property.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param valueToRemove value to remove.
	 */
	public void removeValue(edu.uci.isr.xarch.instance.IDescription valueToRemove);

	/**
	 * Remove all the given values from this Property.
	 * Matching is done by the <code>isEquivalent(...)</code> function.
	 * @param values value to remove.
	 */
	public void removeValues(Collection values);

	/**
	 * Get all the values from this Property.
	 * @return all values in this Property.
	 */
	public Collection getAllValues();

	/**
	 * Determine if this Property contains a given value.
	 * @return <code>true</code> if this Property contains the given
	 * valueToCheck, <code>false</code> otherwise.
	 */
	public boolean hasValue(edu.uci.isr.xarch.instance.IDescription valueToCheck);

	/**
	 * Determine if this Property contains the given set of values.
	 * @param valuesToCheck values to check for.
	 * @return Collection of <code>java.lang.Boolean</code>.  If the i<sup>th</sup>
	 * element in <code>values</code> was found, then the i<sup>th</sup>
	 * element of the collection will be set to <code>true</code>, otherwise it
	 * will be set to <code>false</code>.  Matching is done with the
	 * <code>isEquivalent(...)</code> method.
	 */
	public Collection hasValues(Collection valuesToCheck);

	/**
	 * Determine if this Property contains each element in the 
	 * given set of values.
	 * @param valuesToCheck values to check for.
	 * @return <code>true</code> if every element in
	 * <code>values</code> is found in this Property,
	 * <code>false</code> otherwise.
	 */
	public boolean hasAllValues(Collection valuesToCheck);

	/**
	 * Determine if another Property is equivalent to this one, ignoring
	 * ID's.
	 * @param PropertyToCheck Property to compare to this one.
	 * @return <code>true</code> if all the child elements of this
	 * Property are equivalent, <code>false</code> otherwise.
	 */
	public boolean isEquivalent(IProperty PropertyToCheck);

}
